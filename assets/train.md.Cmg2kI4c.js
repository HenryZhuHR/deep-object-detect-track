import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BMAahRQD.js";const g=JSON.parse('{"title":"模型训练","description":"","frontmatter":{"lastUpdated":true,"editLink":true,"footer":true,"outline":"deep"},"headers":[],"relativePath":"train.md","filePath":"train.md","lastUpdated":1717689240000}'),l={name:"train.md"},t=e(`<h1 id="模型训练" tabindex="-1">模型训练 <a class="header-anchor" href="#模型训练" aria-label="Permalink to &quot;模型训练&quot;">​</a></h1><h2 id="下载预训练模型" tabindex="-1">下载预训练模型 <a class="header-anchor" href="#下载预训练模型" aria-label="Permalink to &quot;下载预训练模型&quot;">​</a></h2><p>下载预训练模型</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-iAVQs" id="tab-PonkIo4" checked="checked"><label for="tab-PonkIo4">bash</label><input type="radio" name="group-iAVQs" id="tab-h8s7kjX"><label for="tab-h8s7kjX">zsh</label></div><div class="blocks"><div class="language-shell vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/download-yolov5.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yolov5s</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 仅下载单个模型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bash scripts/download-yolov5.sh       # 下载所有模型</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zsh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/download-yolov5.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yolov5s</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 仅下载单个模型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># zsh scripts/download-yolov5.sh       # 下载所有模型</span></span></code></pre></div></div></div><h2 id="训练模型-手动设置参数" tabindex="-1">训练模型（手动设置参数） <a class="header-anchor" href="#训练模型-手动设置参数" aria-label="Permalink to &quot;训练模型（手动设置参数）&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> train.py</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/data/drink-organized/dataset.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --cfg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> models/yolov5s.yaml</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --weights</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../.cache/yolov5/yolov5s.pt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --epochs</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --batch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --device</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --workers</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> disk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../../tmp/train</span></span></code></pre></div><ul><li><code>--data</code>: 数据集配置文件，yaml 格式</li><li><code>--cfg</code>: 模型配置文件，yaml 格式，需要和预训练模型参数 <code>--weights</code> 对应</li><li><code>--device</code>: 如果有 GPU 可以设置为 <code>0</code> 或者 <code>1</code>；多个 GPU 用逗号分隔，如果单 GPU 能够满足需求，建议使用单 GPU</li><li><code>--batch</code>: batch size，最重要的参数，建议从 1/2 开始尝试，以避免内存不足，而不要一开始就设置一个很大的值导致系统崩溃</li><li><code>--cache</code>: 缓存类型，<code>ram</code> 或者 <code>disk</code>，可以加快训练速度，如果内存足够，建议使用 <code>ram</code> ，也可以不使用该参数而不缓存数据</li></ul><p>如果已经有了训练好的模型，可以继续训练，使用 <code>--resume</code> 参数从上次训练的 <code>last.pt</code> 模型继续训练</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">## 训练模型（使用提供的脚本）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">提供一个训练脚本</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scripts/train.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">，复制一份到项目目录下进行自定义修改（推荐）</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/train.sh scripts/train.custom.sh</span></span></code></pre></div><p>修改训练脚本 <code>train.custom.sh</code> 中的参数，在 <code>Set Training Variables</code> 中设置</p><ul><li><code>TRAIN_DATA_DIR</code>: (✅重要) 训练数据路径，例如 <code>$HOME/data/bottle-organized</code></li><li><code>TRAIN_DEVICE</code>: (✅重要) 如果有 GPU 可以设置为 <code>0</code> 或者 <code>1</code>；多个 GPU 用逗号分隔，如果单 GPU 能够满足需求，建议使用单 GPU</li><li><code>MODEL_NAME</code>: 训练模型，用以加载 <code>--cfg</code> 参数，默认为 <code>yolov5s</code></li><li><code>PRETRAINED_MODEL</code>: 上面下载好的预训练模型</li><li><code>EPOCHS</code>: epoch</li><li><code>BATCH_SIZE</code>: batch size</li></ul><p>修改完成后，运行脚本开始训练</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bash</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> scripts/train.custom.sh</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#zsh scripts/train.custom.sh # zsh</span></span></code></pre></div>`,13),n=[t];function h(p,d,o,c,k,r){return a(),i("div",null,n)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
